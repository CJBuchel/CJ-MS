"use strict";
/**
 * MHub client for direct (local) connection to an MHub server instance.
 *
 * A LocalClient has the same interface as e.g. NodeClient, but directly connects
 * to a Hub without using e.g. sockets.
 * This is useful for tests, or when embedding an MHub server and client into a
 * program.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const events = require("events");
const baseclient_1 = require("./baseclient");
const hubclient_1 = require("./hubclient");
class LocalConnection extends events.EventEmitter {
    constructor(hub, name) {
        super();
        this._hubClient = new hubclient_1.HubClient(hub, name);
        this._hubClient.on("response", (response) => {
            this.emit("message", response);
        });
        this._hubClient.on("error", (e) => this.emit("error", e));
        Promise.resolve().then(() => {
            // We're a direct connection, so immediately connected.
            // However, need to defer it a bit, because our creator
            // needs to attach the event handler.
            this.emit("open");
        });
    }
    /**
     * Transmit data object.
     * @return Promise that resolves when transmit is accepted (i.e. not necessarily
     * arrived at other side, can be e.g. queued).
     */
    send(data) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._hubClient.processCommand(data);
        });
    }
    /**
     * Gracefully close connection, i.e. allow pending transmissions
     * to be completed.
     * @return Promise that resolves when connection is succesfully closed.
     */
    close() {
        this._hubClient.close();
        this.emit("close");
        return Promise.resolve();
    }
    /**
     * Forcefully close connection.
     * @return Promise that resolves when connection is succesfully closed.
     */
    terminate() {
        this._hubClient.close();
        return Promise.resolve();
    }
}
/**
 * MHub client using server-side WebSocket.
 *
 * Allows subscribing and publishing to MHub server nodes.
 *
 * @event open() Emitted when connection was established.
 * @event close() Emitted when connection was closed.
 * @event error(e: Error) Emitted when there was a connection, server or protocol error.
 * @event message(m: Message) Emitted when message was received (due to subscription).
 */
class LocalClient extends baseclient_1.BaseClient {
    /**
     * Create new connection to MServer.
     * @param url Websocket URL of MServer, e.g. ws://localhost:13900
     * @param options Optional options, see `MClientOptions`.
     */
    constructor(hub, name) {
        super(() => new LocalConnection(hub, name));
    }
}
exports.LocalClient = LocalClient;
exports.default = LocalClient;
//# sourceMappingURL=localclient.js.map