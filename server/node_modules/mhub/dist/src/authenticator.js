"use strict";
/**
 * Simple username/password authentication.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const dict_1 = require("./dict");
/**
 * Basic username/password-based authentication manager.
 */
class PlainAuthenticator {
    constructor() {
        this._users = new dict_1.default(); // Username -> password mapping
    }
    static validateUsername(username) {
        if (typeof username !== "string" || username === "") {
            throw new TypeError("invalid username");
        }
        if (username[0] === "@") {
            // @ sign is reserved for groups
            throw new TypeError("invalid username (cannot start with @)");
        }
    }
    /**
     * Add/replace user, using given password.
     * Note that a username cannot start with an `@`, because that is reserved
     * for group names.
     * @param username Username of user to add or replace
     * @param password Password to use for this user
     */
    setUser(username, password) {
        PlainAuthenticator.validateUsername(username);
        if (typeof password !== "string") {
            throw new TypeError("invalid password");
        }
        this._users.set(username, password);
    }
    /**
     * Remove user, if it exists.
     */
    deleteUser(username) {
        PlainAuthenticator.validateUsername(username);
        this._users.remove(username);
    }
    authenticate(username, password) {
        PlainAuthenticator.validateUsername(username);
        if (typeof password !== "string") {
            throw new TypeError("invalid password");
        }
        return this._users.get(username) === password;
    }
}
exports.PlainAuthenticator = PlainAuthenticator;
//# sourceMappingURL=authenticator.js.map