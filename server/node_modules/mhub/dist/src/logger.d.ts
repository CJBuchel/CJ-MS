/**
 * Debug helper to print nested messages.
 * See log.ts for a convenient singleton instance of this.
 */
export declare enum LogLevel {
    None = 0,
    Fatal = 1,
    Error = 2,
    Warning = 3,
    Info = 4,
    Debug = 5
}
export declare class Logger {
    /**
     * Which level of messages to log.
     */
    logLevel: LogLevel;
    /**
     * Indentation for certain debug messages (message tracing).
     */
    private indent;
    /**
     * Debug function that is called whenever a noteworthy action happens within
     * the pubsub logic, e.g. when a message is routed from an exchange to a
     * destination (which could be another Exchange, a Queue, etc.)
     * Default action is to log the message to the console.
     */
    onMessage: (msg: string) => void;
    fatal(fmt: string, ...args: any[]): void;
    error(fmt: string, ...args: any[]): void;
    warning(fmt: string, ...args: any[]): void;
    info(fmt: string, ...args: any[]): void;
    debug(fmt: string, ...args: any[]): void;
    write(level: LogLevel, fmt: string, ...args: any[]): void;
    push(fmt: string, ...args: any[]): void;
    pop(): void;
}
export default Logger;
