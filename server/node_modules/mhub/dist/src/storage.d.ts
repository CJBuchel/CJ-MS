/**
 * Simple file storage.
 */
export interface Storage<T> {
    /**
     * Save `value` to storage under given `key` as identifier.
     * Note: `value` needs to be JSON serializable.
     * Previous contents (if any) will be overwritten.
     *
     * @param  {string}        key   Identifier to use for later retrieval
     * @param  {T}             value Data to persist
     * @return {Promise<void>}       Promise that resolves when data is persisted
     */
    save(key: string, value: T): Promise<void>;
    /**
     * Load data for given `key` from storage.
     * Returns a JSON deserialized representation of the data, or `undefined` if
     * the key could not be found.
     *
     * @param  {string}     key Identifier of the data as used by `save()`
     * @return {Promise<T>}     Promise that resolves with the data, or `undefined` if not found
     */
    load(key: string): Promise<T | undefined>;
}
export declare class SimpleFileStorage<T> implements Storage<T> {
    private _rootDir;
    constructor(rootDir: string);
    save(key: string, value: T): Promise<void>;
    load(key: string): Promise<T | undefined>;
    private _getFilename;
}
export declare class ThrottledStorage<T> implements Storage<T> {
    private _slave;
    private _saveQueue;
    private _delay;
    constructor(storage: Storage<T>, throttleDelay?: number);
    save(key: string, value: T): Promise<void>;
    load(key: string): Promise<T | undefined>;
}
