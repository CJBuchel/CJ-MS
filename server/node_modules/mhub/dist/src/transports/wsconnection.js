"use strict";
/**
 * Connect WebSocket to an MServer hub.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const hubclient_1 = require("../hubclient");
const log_1 = require("../log");
class WSConnection {
    constructor(hub, socket, name) {
        this._socket = socket;
        this._name = name;
        this._client = new hubclient_1.default(hub, this._name);
        this._client.on("response", this._handleClientResponse.bind(this));
        socket.on("close", this._handleSocketClose.bind(this));
        socket.on("error", this._handleSocketError.bind(this));
        socket.on("message", this._handleSocketMessage.bind(this));
        log_1.default.info("[ %s ] connected", this._name);
    }
    _handleClientResponse(response) {
        this._socket.send(JSON.stringify(response));
    }
    _handleSocketClose() {
        this._client.close();
        log_1.default.info(`[ ${this._name} ] disconnected`);
    }
    _handleSocketError(e) {
        log_1.default.error(`[ ${this._name} ] socket error ${e}`);
        this._socket.close(); // will cause close event, which causes client close
    }
    _handleProtocolError(e) {
        log_1.default.error(`[ ${this._name} ] protocol error ${e}`);
        this._handleClientResponse({
            type: "error",
            message: `protocol error: ${e}`,
        });
    }
    _handleSocketMessage(data) {
        if (data === "") {
            // Ignore empty lines
            return;
        }
        log_1.default.debug(`[ ${this._name} ] command ${data}`);
        try {
            const cmd = JSON.parse(data);
            this._client.processCommand(cmd)
                .catch((e) => this._handleProtocolError(e));
        }
        catch (e) {
            this._handleProtocolError(e);
        }
    }
}
exports.WSConnection = WSConnection;
exports.default = WSConnection;
//# sourceMappingURL=wsconnection.js.map