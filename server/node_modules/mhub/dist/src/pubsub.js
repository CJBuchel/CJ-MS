"use strict";
/**
 * MHub pubsub fabric: nodes and bindings.
 * Provides the basic routing infrastructure to send and receive messages.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const match_1 = require("./match");
function isDestination(node) {
    return !!(node && typeof node.send === "function");
}
exports.isDestination = isDestination;
function isSource(node) {
    return !!(node && typeof node.bind === "function" && typeof node.unbind === "function");
}
exports.isSource = isSource;
class BaseSource {
    constructor(name) {
        this._bindings = [];
        this.name = name;
    }
    bind(destination, pattern) {
        let b;
        // Find existing bindings to this destination
        for (const binding of this._bindings) {
            if (binding.destination === destination) {
                b = binding;
                break;
            }
        }
        // Create binding to this destination if it's the first one
        if (!b) {
            b = {
                matchers: [],
                destination,
            };
            this._bindings.push(b);
        }
        // Create pattern matcher for this destination
        b.matchers.push({
            pattern: (pattern) ? pattern : "",
            filter: match_1.getMatcher(pattern),
        });
    }
    unbind(destination, pattern) {
        if (!pattern) {
            // Remove all bindings to given destination
            this._bindings = this._bindings.filter((b) => {
                const remove = b.destination === destination;
                return !remove;
            });
        }
        else {
            // Remove only specific binding to destination
            this._bindings = this._bindings.filter((b) => {
                b.matchers = b.matchers.filter((m) => {
                    const remove = m.pattern === pattern;
                    return !remove;
                });
                return b.matchers.length > 0;
            });
        }
    }
    _broadcast(message) {
        this._bindings.forEach((b) => {
            if (b.matchers.some((m) => m.filter(message.topic))) {
                b.destination.send(message);
            }
        });
    }
}
exports.BaseSource = BaseSource;
//# sourceMappingURL=pubsub.js.map