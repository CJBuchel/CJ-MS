"use strict";
/**
 * Debug helper to print nested messages.
 * See log.ts for a convenient singleton instance of this.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const util = require("util");
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["None"] = 0] = "None";
    LogLevel[LogLevel["Fatal"] = 1] = "Fatal";
    LogLevel[LogLevel["Error"] = 2] = "Error";
    LogLevel[LogLevel["Warning"] = 3] = "Warning";
    LogLevel[LogLevel["Info"] = 4] = "Info";
    LogLevel[LogLevel["Debug"] = 5] = "Debug";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
class Logger {
    constructor() {
        /**
         * Which level of messages to log.
         */
        this.logLevel = LogLevel.Info;
        /**
         * Indentation for certain debug messages (message tracing).
         */
        this.indent = "";
        /**
         * Debug function that is called whenever a noteworthy action happens within
         * the pubsub logic, e.g. when a message is routed from an exchange to a
         * destination (which could be another Exchange, a Queue, etc.)
         * Default action is to log the message to the console.
         */
        this.onMessage = (msg) => {
            // tslint:disable-next-line:no-console
            console.log(msg);
        };
    }
    fatal(fmt, ...args) {
        this.write(LogLevel.Fatal, fmt, ...args);
    }
    error(fmt, ...args) {
        this.write(LogLevel.Error, fmt, ...args);
    }
    warning(fmt, ...args) {
        this.write(LogLevel.Warning, fmt, ...args);
    }
    info(fmt, ...args) {
        this.write(LogLevel.Info, fmt, ...args);
    }
    debug(fmt, ...args) {
        this.write(LogLevel.Debug, this.indent + fmt, ...args);
    }
    write(level, fmt, ...args) {
        if (!this.onMessage || level > this.logLevel) {
            return;
        }
        // Prefix log level character (e.g. [E])
        fmt = `[${LogLevel[level][0]}] ${fmt}`;
        // In debug mode, prefix timestamp before that
        if (this.logLevel === LogLevel.Debug) {
            fmt = `${new Date().toISOString()} ${fmt}`;
        }
        const msg = util.format(fmt, ...args);
        this.onMessage(msg);
    }
    push(fmt, ...args) {
        this.debug(fmt, ...args);
        this.indent += "  ";
    }
    pop() {
        this.indent = this.indent.slice(0, -2);
    }
}
exports.Logger = Logger;
exports.default = Logger;
//# sourceMappingURL=logger.js.map