"use strict";
/**
 * MHub server (mserver)
 *
 * Makes MHub pubsub Nodes available through WebSockets.
 */
Object.defineProperty(exports, "__esModule", { value: true });
require("source-map-support/register");
const path = require("path");
const yargs = require("yargs");
const configparser_1 = require("./configparser");
const logger_1 = require("./logger");
const nodeserver_1 = require("./nodeserver");
const log_1 = require("./log");
// tslint:disable-next-line:no-shadowed-variable
function die(fmt, ...args) {
    log_1.default.fatal(fmt, ...args);
    process.exit(1);
}
// Build list of valid log level names (e.g. none, fatal, error, ...)
const logLevelNames = Object.keys(logger_1.LogLevel).filter((s) => !/\d+/.test(s)).map((s) => s.toLowerCase());
// Parse input arguments
const args = yargs
    .usage("mhub-server [-c <config_file>]")
    .help("help")
    .alias("h", "help")
    // tslint:disable-next-line:no-require-imports
    .version()
    .alias("v", "version")
    .option("config", {
    type: "string",
    alias: "c",
    description: "Filename of config, uses mhub's server.conf.json by default",
})
    .option("loglevel", {
    type: "string",
    alias: "l",
    description: "Override log level in config file. Valid options: " + logLevelNames.join(", "),
})
    .strict()
    .argv;
// Parse config file
let configFile;
if (!args.config) {
    configFile = path.resolve(__dirname, "../../server.conf.json");
}
else {
    configFile = path.resolve(args.config);
}
function setLogLevel(logLevelName) {
    // Convert config.logging to a LogLevel
    const matching = Object.keys(logger_1.LogLevel).filter((s) => {
        return s.toLowerCase() === logLevelName;
    })[0];
    if (matching) {
        log_1.default.logLevel = logger_1.LogLevel[matching];
    }
    else {
        die(`Invalid log level '${logLevelName}', expected one of: ${logLevelNames.join(", ")}`);
    }
}
function main() {
    const config = configparser_1.default(configFile);
    setLogLevel(args.loglevel || config.logging);
    log_1.default.info("Using config file " + configFile);
    // Create server
    const server = new nodeserver_1.MServer(config);
    server.setLogger(log_1.default);
    return server.init();
}
Promise.resolve().then(main).catch((err) => {
    die("main failed: ", err);
});
//# sourceMappingURL=mhub-server.js.map